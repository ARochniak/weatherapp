{"version":3,"sources":["Components/Hours/index.js","Components/Days/index.js","Components/TempList/index.js","App.js","serviceWorker.js","index.js"],"names":["Hours","hoursCells","i","push","key","weakDays","Days","props","days","today","Date","daysCount","getHours","getDay","TempList","list","cells","emptyCellsCount","dt","forEach","weather","imgSrc","icon","temp","main","Math","round","src","alt","description","tempList","App","useState","weatherState","setWeather","error","setError","useEffect","localStorageInitTime","localStorage","getItem","setItem","clear","JSON","parse","weatherByCoords","coords","a","latitude","longitude","fetch","response","json","navigator","geolocation","getCurrentPosition","position","weatherResponse","Error","message","stringify","err","console","warn","code","enableHighAccuracy","timeout","maximumAge","alert","className","city","name","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"oOAUeA,EARD,WAEZ,IADA,IAAMC,EAAa,GACVC,EAAI,EAAGA,EAAI,EAAGA,IACrBD,EAAWE,KAAK,yBAAKC,IAAKF,GAAI,EAAM,EAAFA,IAEpC,OAAO,oCAAGD,ICLNI,EAAW,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAarEC,EAXF,SAACC,GACb,IAAMC,EAAO,CAAC,yBAAKJ,IAAK,GAAG,yCACvBK,EAAQ,IAAIC,KAAMH,EAAME,OACtBE,EAAiC,IAArBF,EAAMG,WAAmB,EAAI,EAC9CH,EAAQA,EAAMI,SACf,IAAK,IAAIX,EAAI,EAAGA,EAAIS,EAAWT,IAC7BM,EAAKL,KAAK,yBAAKC,IAAKF,EAAE,GAAG,8BAAOG,IAAWI,EAAQ,MAErD,OAAO,oCAAGD,ICiBIM,EA3BE,SAACP,GAwBjB,OAAO,oCAvBW,SAAAQ,GAIf,IAHA,IAAMC,EAAQ,GAERC,GADY,IAAIP,KAAmB,IAAbK,EAAK,GAAGG,IAAWN,WACV,GAAK,EACjCV,EAAI,EAAGA,EAAIe,EAAiBf,IACnCc,EAAMb,KAAK,yBAAKC,IAAKF,KAGvBa,EAAKI,SAAS,SAACC,EAAShB,GACtB,IAAMiB,EAAM,2CAAuCD,EAAQA,QAAQ,GAAGE,KAA1D,WACNC,EAAOH,EAAQI,KAAKD,KAC1BP,EAAMb,KACJ,yBAAKC,IAAKA,EAAMa,GACd,8BAAOQ,KAAKC,MAAMH,EAAO,OAAQ,IACjC,yBAAKI,IAAKN,EAAQO,IAAKR,EAAQA,QAAQ,GAAGS,mBAIhD,IAAK,IAAI3B,EAAI,EAAGA,EAAI,EAAEe,EAAiBf,IACrCc,EAAMb,KAAK,yBAAKC,IAAKa,EAAgB,GAAGf,KAE1C,OAAOc,EAEAc,CAASvB,EAAMQ,Q,MCgEXgB,MAlFf,WAAgB,IAAD,EACsBC,mBAAS,MAD/B,mBACNC,EADM,KACQC,EADR,OAEaF,mBAAS,MAFtB,mBAENG,EAFM,KAECC,EAFD,KAwDb,OApDAC,qBAAW,WAET,IACMC,EAAuBC,aAAaC,QAAQ,wBACrB,OAAzBF,EACFC,aAAaE,QAAQ,wBAAyB,IAAI/B,OACxC,IAAIA,KAAS4B,EAJX,QAKZC,aAAaG,QACbH,aAAaE,QAAQ,wBAAyB,IAAI/B,OAGpD,IAAMU,EAAUmB,aAAaC,QAAQ,WACrC,GAAIpB,EACFc,EAAWS,KAAKC,MAAMxB,QADxB,CAKA,IAAMyB,EAAe,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACfC,EAAuBF,EAAvBE,SAAUC,EAAaH,EAAbG,UADK,kBAICC,MAAM,+FAAD,OAAgGF,EAAhG,gBAAgHC,IAJtH,cAIhBE,EAJgB,gBAKJA,EAASC,OALL,OAKpBhC,EALoB,yHASbA,GATa,0DAAH,sDAYrB,GAAI,gBAAiBiC,UAAW,CAO9BA,UAAUC,YAAYC,mBAAtB,uCAA0C,WAAOC,GAAP,eAAAT,EAAA,sEACVF,EAAgBW,EAASV,QADf,QAClCW,EADkC,kBAETC,MAC7BtB,EAASqB,EAAgBE,UAEzBpB,aAAaE,QAAQ,UAAWE,KAAKiB,UAAUH,IAC/CvB,EAAWuB,IAN2B,2CAA1C,uDAQG,SAACI,GACFC,QAAQC,KAAR,gBAAsBF,EAAIG,KAA1B,cAAoCH,EAAIF,YAf1B,CACdM,oBAAoB,EACpBC,QAAS,IACTC,WAAY,SAedC,MAAM,0BAEP,IAGD,yBAAKC,UAAU,OAEVpC,GAAiBE,EACIA,EAAS,4BAAKA,GACpC,oCACE,4BAAKF,EAAaqC,KAAKC,MACvB,yBAAKF,UAAU,WACb,yBAAKA,UAAU,SACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,QACb,kBAAC,EAAD,CAAM5D,MAA+B,IAAxBwB,EAAalB,KAAK,GAAGG,MAEpC,yBAAKmD,UAAU,YACb,kBAAC,EAAD,CAAUtD,KAAMkB,EAAalB,UAXnC,4CCxDYyD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmB3B,WACrBA,UAAU4B,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d5f76dda.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Hours = () => {\r\n  const hoursCells = [];\r\n  for (let i = 0; i < 8; i++) {\r\n    hoursCells.push(<div key={i}>{2 + i*3}</div>)\r\n  }\r\n  return <>{hoursCells}</>;\r\n}\r\n\r\nexport default Hours;","import React from 'react';\r\n\r\nconst weakDays = ['Sunday', 'Monday', 'Tuesday', 'Wednesdey', 'Thursday', 'Friday', 'Saturday'];\r\n\r\nconst Days = (props) => {\r\n\tconst days = [<div key={0}><span>Today</span></div>];\r\n\tlet today = new Date (props.today);\r\n\tconst daysCount = today.getHours() !== 2 ? 5 : 4;\r\n  today = today.getDay();\r\n\tfor (let i = 0; i < daysCount; i++) {\r\n\t \tdays.push(<div key={i+1}><span>{weakDays[++today % 7]}</span></div>)\r\n\t } \r\n\treturn <>{days}</>;\r\n}\r\n\r\nexport default Days;","import React from 'react';\r\n\r\nconst TempList = (props) => {\r\n  const tempList = list => {\r\n    const cells = [];\r\n    const startHour = new Date (list[0].dt * 1000).getHours();\r\n    const emptyCellsCount = (startHour - 2) / 3;\r\n    for (let i = 0; i < emptyCellsCount; i++) {\r\n      cells.push(<div key={i}></div>);\r\n    }\r\n      \r\n    list.forEach( (weather, key) => {\r\n      const imgSrc = `http://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`;\r\n      const temp = weather.main.temp;\r\n      cells.push(\r\n        <div key={key + emptyCellsCount}>\r\n          <span>{Math.round(temp - 273.15, 2)}</span>\r\n          <img src={imgSrc} alt={weather.weather[0].description}/>\r\n        </div>  \r\n      )\r\n    })\r\n    for (let i = 0; i < 8-emptyCellsCount; i++) {\r\n      cells.push(<div key={emptyCellsCount+40+i}></div>);\r\n    }\r\n    return cells;\r\n  }\r\n\treturn <>{tempList(props.list)}</>;\r\n}\r\n\r\nexport default TempList;","import React, { useState, useEffect } from 'react';\n\nimport Hours from \"./Components/Hours\";\nimport Days from \"./Components/Days\";\nimport TempList from \"./Components/TempList\";\n\nimport './App.css';\n\nfunction App() {\n  const [weatherState, setWeather] = useState(null)\n  const [error, setError] = useState(null)\n\n  useEffect( () => {\n    // save weather object in localStorage for 3 hours\n    const limit = 3*3600*1000;\n    const localStorageInitTime = localStorage.getItem('localStorageInitTime');\n    if (localStorageInitTime === null) {\n      localStorage.setItem('localStorageInitTime', +new Date());\n    } else if (+new Date() - localStorageInitTime > limit) {\n      localStorage.clear();\n      localStorage.setItem('localStorageInitTime', +new Date());\n    }\n\n    const weather = localStorage.getItem('weather');\n    if (weather) {\n      setWeather(JSON.parse(weather));\n      return;\n    }\n\n    const weatherByCoords = async (coords) => {\n      const {latitude, longitude} = coords;\n      let weather;\n      try {\n        let response = await fetch(`https://api.openweathermap.org/data/2.5/forecast?APPID=373a158eb6eb097745db5c80be9b3eaf&lat=${latitude}&lon=${longitude}`);\n        weather = await response.json();\n      } catch (err) {\n        return err;\n      }\n        return weather;\n    }\n\n    if (\"geolocation\" in navigator) {\n      const options = {\n        enableHighAccuracy: true,\n        timeout: 5000,\n        maximumAge: 0\n      };\n\n      navigator.geolocation.getCurrentPosition( async (position) => {\n        const weatherResponse = await weatherByCoords(position.coords);\n        if (weatherResponse instanceof Error) \n          setError(weatherResponse.message);\n        else { \n          localStorage.setItem('weather', JSON.stringify(weatherResponse));\n          setWeather(weatherResponse);\n        }\n      }, (err) => {\n        console.warn(`ERROR(${err.code}): ${err.message}`)\n      }, options);\n    } else {\n      alert(\"Turn on geolocation\");\n    }\n  }, [])\n\n  return (\n    <div className=\"App\">\n      {\n        !weatherState && !error ? \n        <h1>Loading...</h1> : error ? (<h1>{error}</h1>) : (\n        <>\n          <h1>{weatherState.city.name}</h1>\n          <div className=\"wrapper\">\n            <div className=\"hours\">\n              <Hours />\n            </div>\n            <div className=\"days\">\n              <Days today={weatherState.list[0].dt*1000}/>\n            </div>\n            <div className=\"tempList\">\n              <TempList list={weatherState.list} />\n            </div>\n\n          </div>\n        </>\n        )\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}